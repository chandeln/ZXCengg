{"version":3,"sources":["actions/api.js","actions/dCandidate.js","reducers/dCandidate.js","reducers/index.js","actions/store.js","components/useForm.js","components/DCandidateForm.js","components/DCandidates.js","components/login.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["baseUrl","url","fetchAll","axios","get","fetchById","id","create","newRecord","post","update","updateRecord","put","delete","ACTION_TYPES","formateData","data","age","parseInt","initialState","list","reducers","combineReducers","dCandidate","state","action","type","payload","map","x","filter","store","createStore","compose","applyMiddleware","thunk","useForm","initialFieldValues","validate","setCurrentId","useState","values","setValues","errors","setErrors","handleInputChange","e","target","name","value","fieldValue","resetForm","fullName","mobile","email","bloodGroup","address","mapActionToProps","createDCandidate","onSuccess","dispatch","api","then","res","catch","err","console","log","updateDCandidate","connect","dCandidateList","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","classes","props","addToast","useToasts","fieldValues","temp","test","Object","every","inputLabel","React","useRef","labelWidth","setLabelWidth","useEffect","current","offsetWidth","currentId","find","autoComplete","noValidate","className","onSubmit","preventDefault","appearance","Grid","container","item","xs","TextField","variant","label","onChange","error","helperText","FormControl","InputLabel","ref","Select","MenuItem","FormHelperText","Button","color","onClick","fetchAllDCandidates","response","deleteDCandidate","fontSize","paper","padding","Paper","elevation","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","record","index","key","hover","ButtonGroup","window","confirm","Login","errorMessages","setErrorMessages","isSubmitted","setIsSubmitted","database","username","password","renderErrorMessage","message","renderForm","event","document","forms","uname","pass","userData","user","required","App","autoDismiss","Container","maxWidth","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.02338297.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"http://localhost:60671/api/\"\n\n\n\nexport default {\n\n    dCandidate(url = baseUrl + 'dcandidate/') {\n        return {\n            fetchAll: () => axios.get(url),\n            fetchById: id => axios.get(url + id),\n            create: newRecord => axios.post(url, newRecord),\n            update: (id, updateRecord) => axios.put(url + id, updateRecord),\n            delete: id => axios.delete(url + id)\n        }\n    }\n}","import api from \"./api\";\n\nexport const ACTION_TYPES = {\n    CREATE: 'CREATE',\n    UPDATE: 'UPDATE',\n    DELETE: 'DELETE',\n    FETCH_ALL: 'FETCH_ALL'\n}\n\nconst formateData = data => ({\n    ...data,\n    age: parseInt(data.age ? data.age : 0)\n})\n\nexport const fetchAll = () => dispatch => {\n    api.dCandidate().fetchAll()\n        .then(response => {\n            dispatch({\n                type: ACTION_TYPES.FETCH_ALL,\n                payload: response.data\n            })\n        })\n        .catch(err => console.log(err))\n}\n\nexport const create = (data, onSuccess) => dispatch => {\n    data = formateData(data)\n    api.dCandidate().create(data)\n        .then(res => {\n            dispatch({\n                type: ACTION_TYPES.CREATE,\n                payload: res.data\n            })\n            onSuccess()\n        })\n        .catch(err => console.log(err))\n}\n\nexport const update = (id, data, onSuccess) => dispatch => {\n    data = formateData(data)\n    api.dCandidate().update(id, data)\n        .then(res => {\n            dispatch({\n                type: ACTION_TYPES.UPDATE,\n                payload: { id, ...data }\n            })\n            onSuccess()\n        })\n        .catch(err => console.log(err))\n}\n\nexport const Delete = (id, onSuccess) => dispatch => {\n    api.dCandidate().delete(id)\n        .then(res => {\n            dispatch({\n                type: ACTION_TYPES.DELETE,\n                payload: id\n            })\n            onSuccess()\n        })\n        .catch(err => console.log(err))\n}","import { ACTION_TYPES } from \"../actions/dCandidate\";\nconst initialState = {\n    list: []\n}\n\n\nexport const dCandidate = (state = initialState, action) => {\n\n    switch (action.type) {\n        case ACTION_TYPES.FETCH_ALL:\n            return {\n                ...state,\n                list: [...action.payload]\n            }\n\n        case ACTION_TYPES.CREATE:\n            return {\n                ...state,\n                list: [...state.list, action.payload]\n            }\n\n        case ACTION_TYPES.UPDATE:\n            return {\n                ...state,\n                list: state.list.map(x => x.id == action.payload.id ? action.payload : x)\n            }\n\n        case ACTION_TYPES.DELETE:\n            return {\n                ...state,\n                list: state.list.filter(x => x.id != action.payload)\n            }\n            \n        default:\n            return state\n    }\n}","import { combineReducers } from \"redux\";\nimport { dCandidate } from \"./dCandidate\";\n\nexport const reducers = combineReducers({\n    dCandidate\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { reducers } from \"../reducers\";\n\n\nexport const store = createStore(\n    reducers,\n    compose(\n        applyMiddleware(thunk),\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n)","import React, { useState, useEffect } from \"react\";\n\nconst useForm = (initialFieldValues, validate, setCurrentId) => {\n    const [values, setValues] = useState(initialFieldValues)\n    const [errors, setErrors] = useState({})\n\n    const handleInputChange = e => {\n        const { name, value } = e.target\n        const fieldValue = { [name]: value }\n        setValues({\n            ...values,\n            ...fieldValue\n        })\n        validate(fieldValue)\n    }\n\n    const resetForm = () => {\n        setValues({\n            ...initialFieldValues\n        })\n        setErrors({})\n        setCurrentId(0)\n    }\n\n    return {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    };\n}\n\nexport default useForm;","import React, { useState, useEffect } from \"react\";\nimport { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/dCandidate\";\nimport { useToasts } from \"react-toast-notifications\";\n\nconst styles = theme => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            minWidth: 230,\n        }\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 230,\n    },\n    smMargin: {\n        margin: theme.spacing(1)\n    }\n})\n\nconst initialFieldValues = {\n    fullName: '',\n    mobile: '',\n    email: '',\n    age: '',\n    bloodGroup: '',\n    address: ''\n}\n\nconst DCandidateForm = ({ classes, ...props }) => {\n\n    //toast msg.\n    const { addToast } = useToasts()\n\n    //validate()\n    //validate({fullName:'jenny'})\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('fullName' in fieldValues)\n            temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\"\n        if ('mobile' in fieldValues)\n            temp.mobile = fieldValues.mobile ? \"\" : \"This field is required.\"\n        if ('bloodGroup' in fieldValues)\n            temp.bloodGroup = fieldValues.bloodGroup ? \"\" : \"This field is required.\"\n        if ('email' in fieldValues)\n            temp.email = (/^$|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues == values)\n            return Object.values(temp).every(x => x == \"\")\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\n\n    //material-ui select\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        if (validate()) {\n            const onSuccess = () => {\n                resetForm()\n                addToast(\"Submitted successfully\", { appearance: 'success' })\n            }\n            if (props.currentId == 0)\n                props.createDCandidate(values, onSuccess)\n            else\n                props.updateDCandidate(props.currentId, values, onSuccess)\n        }\n    }\n\n    useEffect(() => {\n        if (props.currentId != 0) {\n            setValues({\n                ...props.dCandidateList.find(x => x.id == props.currentId)\n            })\n            setErrors({})\n        }\n    }, [props.currentId])\n\n    return (\n        <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\n            <Grid container>\n                <Grid item xs={6}>\n                    <TextField\n                        name=\"fullName\"\n                        variant=\"outlined\"\n                        label=\"Full Name\"\n                        value={values.fullName}\n                        onChange={handleInputChange}\n                        {...(errors.fullName && { error: true, helperText: errors.fullName })}\n                    />\n                    <TextField\n                        name=\"email\"\n                        variant=\"outlined\"\n                        label=\"Email\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                        {...(errors.email && { error: true, helperText: errors.email })}\n                    />\n                    <FormControl variant=\"outlined\"\n                        className={classes.formControl}\n                        {...(errors.bloodGroup && { error: true })}\n                    >\n                        <InputLabel ref={inputLabel}>Project Group</InputLabel>\n                        <Select\n                            name=\"bloodGroup\"\n                            value={values.bloodGroup}\n                            onChange={handleInputChange}\n                            labelWidth={labelWidth}\n                        >\n                            <MenuItem value=\"\">Select Project Group</MenuItem>\n                            <MenuItem value=\"A1\">A1</MenuItem>\n                            <MenuItem value=\"A2\">A2</MenuItem>\n                            <MenuItem value=\"B1\">B1</MenuItem>\n                            <MenuItem value=\"B2\">B2</MenuItem>\n                            <MenuItem value=\"AB1\">AB1</MenuItem>\n                            <MenuItem value=\"AB2\">AB2</MenuItem>\n                            <MenuItem value=\"O1\">O1</MenuItem>\n                            <MenuItem value=\"O2\">O2</MenuItem>\n                        </Select>\n                        {errors.bloodGroup && <FormHelperText>{errors.bloodGroup}</FormHelperText>}\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n\n                    <TextField\n                        name=\"mobile\"\n                        variant=\"outlined\"\n                        label=\"Project Code\"\n                        value={values.mobile}\n                        onChange={handleInputChange}\n                        {...(errors.mobile && { error: true, helperText: errors.mobile })}\n                    />\n                    <TextField\n                        name=\"age\"\n                        variant=\"outlined\"\n                        label=\"Project Dureation(In days)\"\n                        value={values.age}\n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        name=\"address\"\n                        variant=\"outlined\"\n                        label=\"Project Name\"\n                        value={values.address}\n                        onChange={handleInputChange}\n                    />\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            className={classes.smMargin}\n                        >\n                            Submit\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            className={classes.smMargin}\n                            onClick={resetForm}\n                        >\n                            Reset\n                        </Button>\n                    </div>\n                </Grid>\n            </Grid>\n        </form>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    dCandidateList: state.dCandidate.list\n})\n\nconst mapActionToProps = {\n    createDCandidate: actions.create,\n    updateDCandidate: actions.update\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(DCandidateForm));","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/dCandidate\";\nimport { Grid, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\nimport DCandidateForm from \"./DCandidateForm\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { useToasts } from \"react-toast-notifications\";\n\n\n\nconst styles = theme => ({\n    root: {\n        \"& .MuiTableCell-head\": {\n            fontSize: \"1.25rem\"\n        }\n    },\n    paper: {\n        margin: theme.spacing(2),\n        padding: theme.spacing(2)\n    }\n})\n\nconst DCandidates = ({ classes, ...props }) => {\n    const [currentId, setCurrentId] = useState(0)\n\n    useEffect(() => {\n        props.fetchAllDCandidates()\n    }, [])//componentDidMount\n    \n    //toast msg.\n    const { addToast } = useToasts()\n\n    const onDelete = id => {\n        if (window.confirm('Are you sure to delete this record?'))\n            props.deleteDCandidate(id,()=>addToast(\"Deleted successfully\", { appearance: 'info' }))\n    }\n    return (\n        <Paper className={classes.paper} elevation={3}>\n            <h1 id=\"mainHead\">ZXC Engineering Project Allocation Portal</h1>\n            <Grid container>\n                <Grid item xs={6}>\n                    <DCandidateForm {...({ currentId, setCurrentId })} />\n                </Grid>\n                <Grid item xs={6}>\n                    <TableContainer>\n                        <Table>\n                            <TableHead className={classes.root}>\n                                <TableRow>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Project Code</TableCell>\n                                    <TableCell>Project Group</TableCell>\n                                    <TableCell>Project Status</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    props.dCandidateList.map((record, index) => {\n                                        return (<TableRow key={index} hover>\n                                            <TableCell>{record.fullName}</TableCell>\n                                            <TableCell>{record.mobile}</TableCell>\n                                            <TableCell>{record.bloodGroup}</TableCell>\n                                            <TableCell color=\"red\">Running</TableCell>\n                                            <TableCell>\n                                                <ButtonGroup variant=\"text\">\n                                                    <Button><EditIcon color=\"primary\"\n                                                        onClick={() => { setCurrentId(record.id) }} /></Button>\n                                                    <Button><DeleteIcon color=\"secondary\"\n                                                        onClick={() => onDelete(record.id)} /></Button>\n                                                </ButtonGroup>\n                                            </TableCell>\n                                        </TableRow>)\n                                    })\n                                }\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nconst mapStateToProps = state => ({\n    dCandidateList: state.dCandidate.list\n})\n\nconst mapActionToProps = {\n    fetchAllDCandidates: actions.fetchAll,\n    deleteDCandidate: actions.Delete\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(DCandidates));","import React, { useState } from \"react\";\r\nimport DCandidates from \"./DCandidates\";\r\n\r\n\r\nfunction Login() {\r\n  // React States\r\n  const [errorMessages, setErrorMessages] = useState({});\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  // User Login info\r\n  const database = [\r\n    {\r\n      username: \"user1\",\r\n      password: \"pass1\"\r\n    },\r\n    {\r\n      username: \"user2\",\r\n      password: \"pass2\"\r\n    }\r\n  ];\r\n\r\n  const errors = {\r\n    uname: \"invalid username\",\r\n    pass: \"invalid password\"\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    //Prevent page reload\r\n    event.preventDefault();\r\n\r\n    var { uname, pass } = document.forms[0];\r\n\r\n    // Find user login info\r\n    const userData = database.find((user) => user.username === uname.value);\r\n\r\n    // Compare user info\r\n    if (userData) {\r\n      if (userData.password !== pass.value) {\r\n        // Invalid password\r\n        setErrorMessages({ name: \"pass\", message: errors.pass });\r\n      } else {\r\n        setIsSubmitted(true);\r\n      }\r\n    } else {\r\n      // Username not found\r\n      setErrorMessages({ name: \"uname\", message: errors.uname });\r\n    }\r\n  };\r\n\r\n  // Generate JSX code for error message\r\n  const renderErrorMessage = (name) =>\r\n    name === errorMessages.name && (\r\n      <div className=\"error\">{errorMessages.message}</div>\r\n    );\r\n\r\n  // JSX code for login form\r\n  const renderForm = (\r\n    <div className=\"form\">\r\n      <h1 id=\"logHead\">ZXC Engineering Project Allocation Portal</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"input-container\">\r\n          <label className=\"lab\">Username : </label>\r\n          <input type=\"text\" id=\"inp2\" name=\"uname\" required />\r\n          {renderErrorMessage(\"uname\")}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <label className=\"lab\">Password : </label>\r\n          <input id=\"inp\" type=\"password\" name=\"pass\" required />\r\n          {renderErrorMessage(\"pass\")}\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <input type=\"submit\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"login-form\">\r\n        {/* <div className=\"title\">Sign In</div> */}\r\n        {isSubmitted ? <DCandidates /> : renderForm}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { store } from \"./actions/store\";\nimport { Provider } from \"react-redux\";\nimport DCandidates from './components/DCandidates';\nimport { Container } from \"@material-ui/core\";\nimport { ToastProvider } from \"react-toast-notifications\";\nimport Login from './components/login';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ToastProvider autoDismiss={true}>\n        <Container maxWidth=\"lg\">\n          <Login/>\n        </Container>\n      </ToastProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}